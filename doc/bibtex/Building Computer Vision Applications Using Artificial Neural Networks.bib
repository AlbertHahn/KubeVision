
@incollection{ansari_prerequisites_2020,
	address = {Berkeley, CA},
	title = {Prerequisites and {Software} {Installation}},
	isbn = {978-1-4842-5887-3},
	url = {https://doi.org/10.1007/978-1-4842-5887-3_1},
	abstract = {This is a hands-on book that describes how to develop computer vision applications in the Python programming language. In this book, you will learn how to work with OpenCV to manipulate images and build machine learning models using TensorFlow.},
	language = {en},
	urldate = {2022-02-21},
	booktitle = {Building {Computer} {Vision} {Applications} {Using} {Artificial} {Neural} {Networks}: {With} {Step}-by-{Step} {Examples} in {OpenCV} and {TensorFlow} with {Python}},
	publisher = {Apress},
	author = {Ansari, Shamshad},
	editor = {Ansari, Shamshad},
	year = {2020},
	doi = {10.1007/978-1-4842-5887-3_1},
	pages = {1--8},
	file = {Springer Full Text PDF:/home/alberthahn/Zotero/storage/DBT2SIQS/Ansari - 2020 - Prerequisites and Software Installation.pdf:application/pdf},
}

@incollection{ansari_practical_2020,
	address = {Berkeley, CA},
	title = {Practical {Example}: {Face} {Recognition}},
	isbn = {978-1-4842-5887-3},
	shorttitle = {Practical {Example}},
	url = {https://doi.org/10.1007/978-1-4842-5887-3_8},
	abstract = {Face recognition is a computer vision problem to detect and identify human faces in an image or video. The first step of facial recognition is to detect and locate the position of the face in the input image. This is a typical object detection task like we learned about in the previous chapters. After the face is detected, a feature set, also called a facial footprint or face embedding, is created from various key points on the face. A human face has 80 nodal points or distinguishing landmarks that are used to create the feature set (USPTO Patent Number US7634662B2, https://patents.google.com/patent/US7634662B2/). The face embedding is then compared against a database to establish the identity of the face.},
	language = {en},
	urldate = {2022-02-21},
	booktitle = {Building {Computer} {Vision} {Applications} {Using} {Artificial} {Neural} {Networks}: {With} {Step}-by-{Step} {Examples} in {OpenCV} and {TensorFlow} with {Python}},
	publisher = {Apress},
	author = {Ansari, Shamshad},
	editor = {Ansari, Shamshad},
	year = {2020},
	doi = {10.1007/978-1-4842-5887-3_8},
	pages = {337--360},
	file = {Springer Full Text PDF:/home/alberthahn/Zotero/storage/BZRDGFUW/Ansari - 2020 - Practical Example Face Recognition.pdf:application/pdf},
}

@incollection{ansari_industrial_2020,
	address = {Berkeley, CA},
	title = {Industrial {Application}: {Real}-{Time} {Defect} {Detection} in {Industrial} {Manufacturing}},
	isbn = {978-1-4842-5887-3},
	shorttitle = {Industrial {Application}},
	url = {https://doi.org/10.1007/978-1-4842-5887-3_9},
	abstract = {Computer vision has many applications in industrial manufacturing. One such application is in the automation of visual inspection for quality control and assurance.},
	language = {en},
	urldate = {2022-02-21},
	booktitle = {Building {Computer} {Vision} {Applications} {Using} {Artificial} {Neural} {Networks}: {With} {Step}-by-{Step} {Examples} in {OpenCV} and {TensorFlow} with {Python}},
	publisher = {Apress},
	author = {Ansari, Shamshad},
	editor = {Ansari, Shamshad},
	year = {2020},
	doi = {10.1007/978-1-4842-5887-3_9},
	pages = {361--387},
	file = {Springer Full Text PDF:/home/alberthahn/Zotero/storage/54Z3C2JI/Ansari - 2020 - Industrial Application Real-Time Defect Detection.pdf:application/pdf},
}

@incollection{ansari_practical_2020-1,
	address = {Berkeley, CA},
	title = {Practical {Example}: {Object} {Tracking} in {Videos}},
	isbn = {978-1-4842-5887-3},
	shorttitle = {Practical {Example}},
	url = {https://doi.org/10.1007/978-1-4842-5887-3_7},
	abstract = {The focus of this chapter is on two critical capabilities of computer vision: object detection and object tracking. In general and in the context of a set of images, object detection provides the ability to identify one or more objects in an image, and object tracking provides the ability to track a detected object across a set of images. In previous chapters, we explored the technical aspects of training deep learning models to detect objects. In this chapter, we will explore a simple example of putting that knowledge to practice in the context of videos.},
	language = {en},
	urldate = {2022-02-21},
	booktitle = {Building {Computer} {Vision} {Applications} {Using} {Artificial} {Neural} {Networks}: {With} {Step}-by-{Step} {Examples} in {OpenCV} and {TensorFlow} with {Python}},
	publisher = {Apress},
	author = {Ansari, Shamshad},
	editor = {Ansari, Shamshad},
	year = {2020},
	doi = {10.1007/978-1-4842-5887-3_7},
	pages = {309--336},
	file = {Springer Full Text PDF:/home/alberthahn/Zotero/storage/9SERIN2A/Ansari - 2020 - Practical Example Object Tracking in Videos.pdf:application/pdf},
}

@incollection{ansari_core_2020,
	address = {Berkeley, CA},
	title = {Core {Concepts} of {Image} and {Video} {Processing}},
	isbn = {978-1-4842-5887-3},
	url = {https://doi.org/10.1007/978-1-4842-5887-3_2},
	abstract = {This chapter introduces the building blocks of an image and describes various methods to manipulate them. Our learning objectives in this chapter are as follows:},
	language = {en},
	urldate = {2022-02-21},
	booktitle = {Building {Computer} {Vision} {Applications} {Using} {Artificial} {Neural} {Networks}: {With} {Step}-by-{Step} {Examples} in {OpenCV} and {TensorFlow} with {Python}},
	publisher = {Apress},
	author = {Ansari, Shamshad},
	editor = {Ansari, Shamshad},
	year = {2020},
	doi = {10.1007/978-1-4842-5887-3_2},
	pages = {9--26},
	file = {Springer Full Text PDF:/home/alberthahn/Zotero/storage/UP2ZHDFY/Ansari - 2020 - Core Concepts of Image and Video Processing.pdf:application/pdf},
}

@incollection{ansari_computer_2020,
	address = {Berkeley, CA},
	title = {Computer {Vision} {Modeling} on the {Cloud}},
	isbn = {978-1-4842-5887-3},
	url = {https://doi.org/10.1007/978-1-4842-5887-3_10},
	abstract = {Training state-of-the-art convolutional neural networks can require significant computer resources. It may take several hours or days to train a network depending on the number of training samples, network configuration, and available hardware resources. A single GPU may not be feasible to train a complex network involving large numbers of training images. The models need to be trained on multiple GPUs. Only a limited number of GPUs can be installed on a single machine. A single machine with multiple GPUs may not be sufficient for training on a large number of images. It will be faster if the model is trained on multiple machines with each machine having multiple GPUs.},
	language = {en},
	urldate = {2022-02-21},
	booktitle = {Building {Computer} {Vision} {Applications} {Using} {Artificial} {Neural} {Networks}: {With} {Step}-by-{Step} {Examples} in {OpenCV} and {TensorFlow} with {Python}},
	publisher = {Apress},
	author = {Ansari, Shamshad},
	editor = {Ansari, Shamshad},
	year = {2020},
	doi = {10.1007/978-1-4842-5887-3_10},
	pages = {389--442},
	file = {Springer Full Text PDF:/home/alberthahn/Zotero/storage/BFTVAAN7/Ansari - 2020 - Computer Vision Modeling on the Cloud.pdf:application/pdf},
}

@incollection{ansari_building_2020,
	address = {Berkeley, CA},
	title = {Building a {Machine} {Learning}–{Based} {Computer} {Vision} {System}},
	isbn = {978-1-4842-5887-3},
	url = {https://doi.org/10.1007/978-1-4842-5887-3_4},
	abstract = {You learned about various image processing techniques in the previous chapter. In this chapter, we will discuss the steps to develop machine learning computer vision systems. This chapter is a primer for the next chapter, which will provide details on various deep learning algorithms and how to write code with Python to execute on TensorFlow.},
	language = {en},
	urldate = {2022-02-21},
	booktitle = {Building {Computer} {Vision} {Applications} {Using} {Artificial} {Neural} {Networks}: {With} {Step}-by-{Step} {Examples} in {OpenCV} and {TensorFlow} with {Python}},
	publisher = {Apress},
	author = {Ansari, Shamshad},
	editor = {Ansari, Shamshad},
	year = {2020},
	doi = {10.1007/978-1-4842-5887-3_4},
	pages = {95--135},
	file = {Springer Full Text PDF:/home/alberthahn/Zotero/storage/RW7I25Z3/Ansari - 2020 - Building a Machine Learning–Based Computer Vision .pdf:application/pdf},
}

@incollection{ansari_techniques_2020,
	address = {Berkeley, CA},
	title = {Techniques of {Image} {Processing}},
	isbn = {978-1-4842-5887-3},
	url = {https://doi.org/10.1007/978-1-4842-5887-3_3},
	abstract = {In a computer vision application, images are normally ingested from their source, such as cameras, files stored on a computer disk, or streams from another application. In most cases, these input images are converted from one form into another. For example, we may need to resize, rotate, or change their colors. In some cases, we may need to remove the background pixels or merge two images. In other cases, we may need to find the boundaries around certain objects within an image.},
	language = {en},
	urldate = {2022-02-21},
	booktitle = {Building {Computer} {Vision} {Applications} {Using} {Artificial} {Neural} {Networks}: {With} {Step}-by-{Step} {Examples} in {OpenCV} and {TensorFlow} with {Python}},
	publisher = {Apress},
	author = {Ansari, Shamshad},
	editor = {Ansari, Shamshad},
	year = {2020},
	doi = {10.1007/978-1-4842-5887-3_3},
	pages = {27--94},
	file = {Springer Full Text PDF:/home/alberthahn/Zotero/storage/84ZY6D7G/Ansari - 2020 - Techniques of Image Processing.pdf:application/pdf},
}

@incollection{ansari_deep_2020,
	address = {Berkeley, CA},
	title = {Deep {Learning} in {Object} {Detection}},
	isbn = {978-1-4842-5887-3},
	url = {https://doi.org/10.1007/978-1-4842-5887-3_6},
	abstract = {In the previous chapter, we discovered how to classify images using a standard multilayer perceptron (MLP) and a convolutional neural network (CNNs). During classification tasks, we predict the class of the entire image and do not care what kind of objects are in the image. In this chapter, we will detect objects and their locations within the image.},
	language = {en},
	urldate = {2022-02-21},
	booktitle = {Building {Computer} {Vision} {Applications} {Using} {Artificial} {Neural} {Networks}: {With} {Step}-by-{Step} {Examples} in {OpenCV} and {TensorFlow} with {Python}},
	publisher = {Apress},
	author = {Ansari, Shamshad},
	editor = {Ansari, Shamshad},
	year = {2020},
	doi = {10.1007/978-1-4842-5887-3_6},
	pages = {219--307},
	file = {Springer Full Text PDF:/home/alberthahn/Zotero/storage/EWMSXZS8/Ansari - 2020 - Deep Learning in Object Detection.pdf:application/pdf},
}

@incollection{ansari_deep_2020-1,
	address = {Berkeley, CA},
	title = {Deep {Learning} and {Artificial} {Neural} {Networks}},
	isbn = {978-1-4842-5887-3},
	url = {https://doi.org/10.1007/978-1-4842-5887-3_5},
	abstract = {This chapter will cover deep learning and artificial neural networks. The chapter will explore this topic with working code examples to show how to apply deep learning concepts in computer vision. Our learning objectives of this chapter are as follows:},
	language = {en},
	urldate = {2022-02-21},
	booktitle = {Building {Computer} {Vision} {Applications} {Using} {Artificial} {Neural} {Networks}: {With} {Step}-by-{Step} {Examples} in {OpenCV} and {TensorFlow} with {Python}},
	publisher = {Apress},
	author = {Ansari, Shamshad},
	editor = {Ansari, Shamshad},
	year = {2020},
	doi = {10.1007/978-1-4842-5887-3_5},
	pages = {137--218},
	file = {Springer Full Text PDF:/home/alberthahn/Zotero/storage/6KJU35LD/Ansari - 2020 - Deep Learning and Artificial Neural Networks.pdf:application/pdf},
}
